
Investigate effect of individual audio constraints on voice and music
Audio quality for voice is passable but pretty bad for music
  Seemingly this is because by default google processes it first unless instructed otherwise
    doing things like noise suppression and echo removal
  apparently these "constraints" can be added or removed via an constraints object passed to the guM constructor
  Uhoh! navigator.guM is deprecated
    Long live navigator.mediaDevices.getUserMedia( {constraints} )
    Which returnds a promise so...
       result = navigator.getUserMedia({ audio: true })
       p.then( function gotTheMediaStreamWoo(mediaStream){
         // go it!
       })
       p.catch( function(error){ console.log(err.name) } );

Allow recording deletion
  remove from recordings
    index.html needs a delete button
    app needs a event_handler for that button
      that handler asks recorder to delete id wevs then call refresh
        by passing in refresh as a callback

Options

  Audio passthorough option
    In progress, UI and controllers are in place
    just need the hot loop ressurecting

  Re-applying constraints live
    Firefox "seems" to permit constraints to be applied after the fact
      Though I've yet to find one that seems to have any effect
    Chrome 35 has to have them specified up front
      but they do seem to have an effect
   implement recorder.listConstraintsAndStatus()
     return [ constraint1: true, constraint2: false etc]
  Look into constraints in webkit browsers, safari etc
  Other options...
    runtime changeable - toggles
      clipDetectionDisplay: true|false
      audioPassthrough: true:false

Recording stops in firefox after a few seconds, investigate

Use webworker for WAV file creation
Save all recordings to zip
Separation of audio from dom:
    need to mock window.URL.createObjectURL(WAVFileBlob or whatever)
    Alternatively
      make sure it isn't called
        by adding additional logic to function saveStateExecute(arg)?
    Or deal with the consequence of undefined down the line?
    Or make it a fancy undefined?
      http://window.URL.not.present.so.no.URL.for.you.buddy
    We only need it in the views no?
      And the views don't need actual data to test
        so if we even bother testing them we can mock the input there
      We might need to test the view builder though
      But is that a problem if it just doesn't have a url property

make custom audio tag controller/display as stock one cannot be meaningfully styled and looks ugly as owt.
  http://codepen.io/katzkode/pen/ZbxYYG

To use getUserMedia() in an installable app (for example, a Firefox OS app), you need to specify one or both of the following fields inside your manifest file:
  "permissions": {
    "audio-capture": {
      "description": "Required to capture audio using getUserMedia()"
    },
    "video-capture": {
      "description": "Required to capture video using getUserMedia()"
    }
  }


DONE-------------------------

Redesign constraint handling
  constraints = new OptionalAudioConstraintsClass();
  present simpler api with our own group names
     group name maps to list of canonical and prefixed versions of the same thing
     e.g. NoiseSuppression => mozNoiseSuppression, googNoiseSuppression, etc

Added rudimentary clip detection.
Investigate way of getting HQ line in!
Prepend a nice human readable date to the file name
Split recording list renderer into views - SORT OF!
Add playback to each recording list entry
Add save functionality
Refactor to eliminate anon functions, they can make profiling and debugging awkward
  All functions should have names!
