




Mono/Float recording

DONE-------------------------

Added custom audio element and redesigned both
  recordings view and audio elements to render straight to dom
  only changing what is necessary each time.
  

Fixed chrome pasthorugh issue

Allow recording deletion

Come up with better uuid ssytem than just using timestamps!

Get dataDisplay actually working

put all views in a views file
where to put all the click handlers? Left in app.js for now

Move views out of recorder, leaving only viewModels inside

Redesign constraint handling
  constraints = new OptionalAudioConstraintsClass();
  present simpler api with our own group names
     group name maps to list of canonical and prefixed versions of the same thing
     e.g. NoiseSuppression => mozNoiseSuppression, googNoiseSuppression, etc

Added rudimentary clip detection.
Investigate way of getting HQ line in!
Prepend a nice human readable date to the file name
Split recording list renderer into views - SORT OF!
Add playback to each recording list entry
Add save functionality
Refactor to eliminate anon functions, they can make profiling and debugging awkward
  All functions should have names!



LONG TERM--------------------------------------------------------------

  supporting an arbitrary number of channels may be tough, esp as I only have stereo soundcard right now
  but it would be v.cool!
  combo explosion suggests splitting into smaller composable options
    but interleaving an mixing don't map easily to >2 channels
    so maybe presets are the way to go
    left and right channels to sepa`rate arrays
    l & r mixed to mono
    l only
    r only

  channels
  stereo interleave
  sample conversion



  Looping?
    As separate app?
    As extension of current app?
      Make recorder handle looping?
      Make recorder handle multiple formats?
      Make audio engine handle multiple formats.
      Make separate app for looping and only resuse audio engine?
      current app auto downsamples to 16 bit interleaved stereo
      and for looping we may prefer to record to 32bit float
      but it would also be useful to be able to record to mono for memory reasons
      so maybe we could make the audio engine format pluggable?
        stuff in recorder app relys on audio format
          list which stuff
        so it should specify format at construction time?
          between a choice of formats that audio engine offers?
            which formats.
    Looper
      wants to be low latency
      high precision
        does precision need to be higher than the processing block size?
      do we need to timestamp the recorded chunks?
        with the audio clock's timestamp
        if we do this as standard is there much overhead?
      this would allow us to retain variable size chunk recording while
        adding millisecond accuracy
      so yeah, if we want to make this code more general rather than write a seperate audio engine
        we should do that.




  Investigate effect of individual audio constraints on voice and music
    Until API is better implemented in the browsers this would be unproductively slow
    Disabling all by default gives best quality on my music PC so I guess I'll just
    await the day the toggles seem to do something

  Re-applying constraints live
    Firefox "seems" to permit constraints to be applied after the fact
      Though I've yet to find one that seems to have any effect
    Chrome 35 has to have them specified up front
      but they do seem to have an effect
    Look into constraints in webkit browsers, safari etc

  Use webworker for WAV file creation
    Not at all straightforward!
    Main array is an array of arraybuffers
      but if we "transfer" them we lose access to them which we can't have
      AND
      if we copy them in one block then for big selections
        we will block the event loop for too long which is exactly what we are trying to avoid
        even without the display portion active this may still block the scriopt processor and cause glitches
    Possible solution
      when an outpoint is set
        dimension a new fixed width array and write the wav header
          then copy the data over a bit at a time til it's done.
        BUT
          As it stands we would only be able to save a single recording at a time
            as if we returned from saved to buffering state we might trim needed elements
        ALSO
          Can we run without get animation frame?


    Also save all/selected recordings to zip

  Separation of audio from dom:
      need to mock window.URL.createObjectURL(WAVFileBlob or whatever)
      Alternatively
        make sure it isn't called
          by adding additional logic to function saveStateExecute(arg)?
      Or deal with the consequence of undefined down the line?
      Or make it a fancy undefined?
        http://window.URL.not.present.so.no.URL.for.you.buddy
      We only need it in the views no?
        And the views don't need actual data to test
          so if we even bother testing them we can mock the input there
        We might need to test the view builder though
        But is that a problem if it just doesn't have a url property

  make custom audio tag controller/display as stock one cannot be meaningfully styled and looks ugly as owt.
    http://codepen.io/katzkode/pen/ZbxYYG

  Make a chrome/firefox app!
  To use getUserMedia() in an installable app (for example, a Firefox OS app), you need to specify one or both of the following fields inside your manifest file:
    "permissions": {
      "audio-capture": {
        "description": "Required to capture audio using getUserMedia()"
      },
      "video-capture": {
        "description": "Required to capture video using getUserMedia()"
      }
    }
